////////////////////////////////////////////////////////////////////////////////
//Adelie Reference v0.3
//  
//  Created 8/11/2019
//  Last modified 8/14/2019
//  by Joey Herguth
//  
//  Frozen:
//      Load-store
//      32 bit data and address
//      Uses two's compliment
//      Registers may be reduced as necessary.
//      In jump/branch and link instructions, the pc is saved into lr
//      Addressing is by byte
//  
//  Looks good so far!
//  
//  No more MIPS.
//  
//  Hmm... It looks like most of the instructions are 24 bits long. It is
//  looking like Yann Guidon was right.
//  


/*Assembly */   /*Description*/         /*Instruction*/
nop             no operation             8'{2'0, 6'00}
super           transfer control to supervisor
                                         8'{2'0, 6'01}
user            transfer control to user
                                         8'{2'0, 6'02}

not r0          r0 = ~r0                16'{2'1, 6'^, 5'r0, 3'x}
neg r0          r0 = -r0                16'{2'1, 6'^, 5'r0, 3'x}
sgnx.b r0        r0 = sgnx(r0)            16'{2'1, 6'^, 5'r0, 3'x}
sgnx.s r0        r0 = sgnx(r0)            16'{2'1, 6'^, 5'r0, 3'x}
pop.b r0        r0 = mem[sp++]          16'{2'1, 6'^, 5'r0, 3'x}
push.b r0       mem[--sp] = r0          16'{2'1, 6'^, 5'r0, 3'x}
pop.s r0        r0 = mem[sp++]          16'{2'1, 6'^, 5'r0, 3'x}
push.s r0       mem[--sp] = r0          16'{2'1, 6'^, 5'r0, 3'x}
pop.l r0        r0 = mem[sp++]          16'{2'1, 6'^, 5'r0, 3'x}
push.l r0       mem[--sp] = r0          16'{2'1, 6'^, 5'r0, 3'x}
jmp r0          pc = r0                 16'{2'1, 6'^, 5'r0, 3'x}
rjmp r0         pc += r0                16'{2'1, 6'^, 5'r0, 3'x}
rjmp.b #        pc += #                 16'{2'1, 6'^, 8'#}

add r0 r1 r2    r0 = r1 + r2            24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
sub r0 r1 r2    r0 = r1 - r2            24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
and r0 r1 r2    r0 = r1 & r2            24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
or r0 r1 r2     r0 = r1 | r2            24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
xor r0 r1 r2    r0 = r1 ^ r2            24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
shr r0 r1 r2    r0 = r1 >> r2           24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
shl r0 r1 r2    r0 = r1 << r2           24'(2'2, 6'^, 5'r0, 5'r1, 5'r2, 1'x}
add r0 r1 #     r0 = r1 + #             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
sub r0 r1 #     r0 = r1 - #             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
sub r0 # r1     r0 = # - r1             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
and r0 r1 #     r0 = r1 & #             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
or r0 r1 #      r0 = r1 | #             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
xor r0 r1 #     r0 = r1 ^ #             24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
shr r0 r1 #     r0 = r1 >> #            24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
shr r0 # r1     r0 = # >> r1            24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
shl r0 r1 #     r0 = r1 << #            24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
shl r0 # r1     r0 = # << r1            24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
ld.8 r0 r1      r0 = mem[r1 + #]        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
st.8 r0 r1      mem[r0 + #] = r1        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
ld.16 r0 r1     r0 = mem[r1 + #]        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
st.16 r0 r1     mem[r0 + #] = r1        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
ld.32 r0 r1     r0 = mem[r1 + #]        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
st.32 r0 r1     mem[r0 + #] = r1        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
br r0 r1        pc = r0 ? r1 + # : pc + 1
                                        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
brn r0 r1       pc = r0 ? pc + 1 : r1 + #
                                        24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
rbr r0 r1       pc += r0 ? r1 + # : 1   24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
rbrn r0 r1      pc += r0 ? 1 : r1 + #   24'{2'2, 6'^, 5'r0, 5'r1, 6'#}
add r0 #        r0 += #                 24'{2'2, 6'^, 5'r0, 11'#}
sub r0 #        r0 -= #                 24'{2'2, 6'^, 5'r0, 11'#}
and r0 #        r0 &= #                 24'{2'2, 6'^, 5'r0, 11'#}
or r0 #         r0 |= #                 24'{2'2, 6'^, 5'r0, 11'#}
xor r0 #        r0 ^= #                 24'{2'2, 6'^, 5'r0, 11'#}
ldi.s r0 #      r0 = #                  24'{2'2, 6'^, 5'r0, 11'#}
rbr.s r0 #      pc += r0 ? # : 1        24'{2'2, 6'^, 5'r0, 11'#}
rbrn.s r0 #     pc += r0 ? 1 : #        24'{2'2, 6'^, 5'r0, 11'#}
rjmp.s #        pc += #                 24'{2'2, 6'^, 16'#}

ldi.m r0 #      r0 = #                  32'{2'3, 6'^, 5'r0, 19'#}
rbr.m r0 #      pc += r0 ? # : 1        32'{2'3, 6'^, 5'r0, 19'#}
rbrn.m r0 #     pc += r0 ? 1 : #        32'{2'3, 6'^, 5'r0, 19'#}
rjmp.l #        pc += #                 32'{2'3, 6'^, 24'#}
reset           exception               32'{2'3, 6'3F, 24'x}
ill_inst        exception
ill_r           exception
ill_w           exception
ill_x           exception
page_fault      exception

Notes:
    Add r0 r1 0 is used as the move instruction.
    Shift instructions insert zeros into vacant bits.


            0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31
            31  30  29  28  27  26  25  24  23  22  21  20  19  18  17  16  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
           ================================================================================================================================
len 0       0   0   {------ opcode -----}

len 1       0   1   {------ opcode -----}   {------ r0 -----}   x   x   x
len 1       0   1   {------ opcode -----}   {------------ # ------------}

len 2       1   0   {------ opcode -----}   {------ r0 -----}   {------ r1 -----}   {------ r2 -----}   x
len 2       1   0   {------ opcode -----}   {------ r0 -----}   {------ r1 -----}   {-------- # --------}
len 2       1   0   {------ opcode -----}   {------ r0 -----}   {------------------ # ------------------}
len 2       1   0   {------ opcode -----}   {---------------------------- # ----------------------------}

len 3       1   0   {------ opcode -----}   {------ r0 -----}   {------------------------------------ # --------------------------------}
len 3       1   0   {------ opcode -----}   {-------------------------------------------- # --------------------------------------------}


/*Register*/    /*Function*/

00  0
01  1
02  2
03  3       
04  4       
05  5       
06  6       
07  7       
08  8       
09  9       
0a  10      
0b  11      
0c  12      
0d  13      
0e  14      
0f  15      
10  16      
11  17      
12  18      
13  19      
14  20      
15  21      
16  22      
17  23      
18  24      
19  25      
1a  26      
1b  27      
1c  28      
1d  29      
1e  30              stack pointer
1f  31              link register
